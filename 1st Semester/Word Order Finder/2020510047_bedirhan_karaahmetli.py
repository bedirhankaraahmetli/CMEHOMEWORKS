stop_words = ['able', 'about', 'above', 'abroad', 'according', 'accordingly',        'across', 'actually', 'adj', 'after', 'afterwards', 'again', 'against',        'ago', 'ahead', 'aint', 'all', 'allow', 'allows', 'almost', 'alone',        'along', 'alongside', 'already', 'also', 'although', 'always', 'am',        'amid', 'amidst', 'among', 'amongst', 'an', 'and', 'another', 'any',        'anybody', 'anyhow', 'anyone', 'anything', 'anyway', 'anyways',        'anywhere', 'apart', 'appear', 'appreciate', 'appropriate', 'are',        'arent', 'around', 'as', 'as', 'aside', 'ask', 'asking', 'associated',        'at', 'available', 'away', 'awfully', 'back', 'backward', 'backwards',        'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been',        'before', 'beforehand', 'begin', 'behind', 'being', 'believe', 'below',        'beside', 'besides', 'best', 'better', 'between', 'beyond', 'both',        'brief', 'but', 'by', 'came', 'can', 'cannot', 'cant', 'cant',        'caption', 'cause', 'causes', 'certain', 'certainly', 'changes',        'clearly', 'cmon', 'co', 'co', 'com', 'come', 'comes', 'concerning',        'consequently', 'consider', 'considering', 'contain', 'containing',        'contains', 'corresponding', 'could', 'couldnt', 'course', 'cs',        'currently', 'dare', 'darent', 'definitely', 'described', 'despite',        'did', 'didnt', 'different', 'directly', 'do', 'does', 'doesnt',        'doing', 'done', 'dont', 'down', 'downwards', 'during', 'each', 'edu',        'eg', 'eight', 'eighty', 'either', 'else', 'elsewhere', 'end',        'ending', 'enough', 'entirely', 'especially', 'et', 'etc', 'even',        'ever', 'evermore', 'every', 'everybody', 'everyone', 'everything',        'everywhere', 'ex', 'exactly', 'example', 'except', 'fairly', 'far',        'farther', 'few', 'fewer', 'fifth', 'first', 'five', 'followed',        'following', 'follows', 'for', 'forever', 'former', 'formerly',        'forth', 'forward', 'found', 'four', 'from', 'further', 'furthermore',        'get', 'gets', 'getting', 'given', 'gives', 'go', 'goes', 'going',        'gone', 'got', 'gotten', 'greetings', 'had', 'hadnt', 'half',        'happens', 'hardly', 'has', 'hasnt', 'have', 'havent', 'having', 'he',        'hed', 'hell', 'hello', 'help', 'hence', 'her', 'here', 'hereafter',        'hereby', 'herein', 'heres', 'hereupon', 'hers', 'herself', 'hes',        'hi', 'him', 'himself', 'his', 'hither', 'hopefully', 'how', 'howbeit',        'however', 'hundred', 'id', 'ie', 'if', 'ignored', 'ill', 'im',        'immediate', 'in', 'inasmuch', 'inc', 'inc', 'indeed', 'indicate',        'indicated', 'indicates', 'inner', 'inside', 'insofar', 'instead',        'into', 'inward', 'is', 'isnt', 'it', 'itd', 'itll', 'its', 'its',        'itself', 'ive', 'just', 'k', 'keep', 'keeps', 'kept', 'know', 'known',        'knows', 'last', 'lately', 'later', 'latter', 'latterly', 'least',        'less', 'lest', 'let', 'lets', 'like', 'liked', 'likely', 'likewise',        'little', 'look', 'looking', 'looks', 'low', 'lower', 'ltd', 'made',        'mainly', 'make', 'makes', 'many', 'may', 'maybe', 'maynt', 'me',        'mean', 'meantime', 'meanwhile', 'merely', 'might', 'mightnt', 'mine',        'minus', 'miss', 'more', 'moreover', 'most', 'mostly', 'mr', 'mrs',        'much', 'must', 'mustnt', 'my', 'myself', 'name', 'namely', 'nd',        'near', 'nearly', 'necessary', 'need', 'neednt', 'needs', 'neither',        'never', 'neverf', 'neverless', 'nevertheless', 'new', 'next', 'nine',        'ninety', 'no', 'nobody', 'non', 'none', 'nonetheless', 'noone',        'noone', 'nor', 'normally', 'not', 'nothing', 'notwithstanding',        'novel', 'now', 'nowhere', 'obviously', 'of', 'off', 'often', 'oh',        'ok', 'okay', 'old', 'on', 'once', 'one', 'ones', 'ones', 'only',        'onto', 'opposite', 'or', 'other', 'others', 'otherwise', 'ought',        'oughtnt', 'our', 'ours', 'ourselves', 'out', 'outside', 'over',        'overall', 'own', 'particular', 'particularly', 'past', 'per',        'perhaps', 'placed', 'please', 'plus', 'possible', 'presumably',        'probably', 'provided', 'provides', 'que', 'quite', 'qv', 'rather',        'rd', 're', 'really', 'reasonably', 'recent', 'recently', 'regarding',        'regardless', 'regards', 'relatively', 'respectively', 'right',        'round', 'said', 'same', 'saw', 'say', 'saying', 'says', 'second',        'secondly', 'see', 'seeing', 'seem', 'seemed', 'seeming', 'seems',        'seen', 'self', 'selves', 'sensible', 'sent', 'serious', 'seriously',        'seven', 'several', 'shall', 'shant', 'she', 'shed', 'shell', 'shes',        'should', 'shouldnt', 'since', 'six', 'so', 'some', 'somebody', 'someday',        'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhat',        'somewhere', 'soon', 'sorry', 'specified', 'specify', 'specifying',        'still', 'sub', 'such', 'sup', 'sure', 'take', 'taken', 'taking',        'tell', 'tends', 'th', 'than', 'thank', 'thanks', 'thanx', 'that',        'thatll', 'thats', 'thats', 'thatve', 'the', 'their', 'theirs', 'them',        'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby',        'thered', 'therefore', 'therein', 'therell', 'therere', 'theres',        'theres', 'thereupon', 'thereve', 'these', 'they', 'theyd', 'theyll',        'theyre', 'theyve', 'thing', 'things', 'think', 'third', 'thirty',        'this', 'thorough', 'thoroughly', 'those', 'though', 'three',        'through', 'throughout', 'thru', 'thus', 'till', 'to', 'together',        'too', 'took', 'toward', 'towards', 'tried', 'tries', 'truly', 'try',        'trying', 'ts', 'twice', 'two', 'un', 'under', 'underneath', 'undoing',        'unfortunately', 'unless', 'unlike', 'unlikely', 'until', 'unto', 'up',        'upon', 'upwards', 'us', 'use', 'used', 'useful', 'uses', 'using',        'usually', 'v', 'value', 'various', 'versus', 'very', 'via', 'viz',        'vs', 'want', 'wants', 'was', 'wasnt', 'way', 'we', 'wed', 'welcome',        'well', 'well', 'went', 'were', 'were', 'werent', 'weve', 'what',        'whatever', 'whatll', 'whats', 'whatve', 'when', 'whence', 'whenever',        'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'wheres',        'whereupon', 'wherever', 'whether', 'which', 'whichever', 'while',        'whilst', 'whither', 'who', 'whod', 'whoever', 'whole', 'wholl',        'whom', 'whomever', 'whos', 'whose', 'why', 'will', 'willing', 'wish',        'with', 'within', 'without', 'wonder', 'wont', 'would', 'wouldnt',        'yes', 'yet', 'you', 'youd', 'youll', 'your', 'youre', 'yours',        'yourself', 'yourselves', 'youve', 'zero', 'a', 'hows', 'i', 'whens',        'whys', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'l', 'm', 'n', 'o',        'p', 'q', 'r', 's', 't', 'u', 'uucp', 'w', 'x', 'y', 'z', 'i', 'www',        'amount', 'bill', 'bottom', 'call', 'computer', 'con', 'couldnt',        'cry', 'de', 'describe', 'detail', 'due', 'eleven', 'empty', 'fifteen',        'fifty', 'fill', 'find', 'fire', 'forty', 'front', 'full', 'give',        'hasnt', 'herse', 'himse', 'interest', 'itse', 'mill', 'move', 'myse',        'part', 'put', 'show', 'side', 'sincere', 'sixty', 'system', 'ten',        'thick', 'thin', 'top', 'twelve', 'twenty', 'abst', 'accordance',        'act', 'added', 'adopted', 'affected', 'affecting', 'affects', 'ah',        'announce', 'anymore', 'apparently', 'approximately', 'aren', 'arent',        'arise', 'auth', 'beginning', 'beginnings', 'begins', 'biol',        'briefly', 'ca', 'date', 'ed', 'effect', 'etal', 'ff', 'fix', 'gave',        'giving', 'heres', 'hes', 'hid', 'home', 'id', 'im', 'immediately',        'importance', 'important', 'index', 'information', 'invention', 'itd',        'keys', 'kg', 'km', 'largely', 'lets', 'line', 'll', 'means', 'mg',        'million', 'ml', 'mug', 'na', 'nay', 'necessarily', 'nos', 'noted',        'obtain', 'obtained', 'omitted', 'ord', 'owing', 'page', 'pages',        'poorly', 'possibly', 'potentially', 'pp', 'predominantly', 'present',        'previously', 'primarily', 'promptly', 'proud', 'quickly', 'ran',        'readily', 'ref', 'refs', 'related', 'research', 'resulted',        'resulting', 'results', 'run', 'sec', 'section', 'shed', 'shes',        'showed', 'shown', 'showns', 'shows', 'significant', 'significantly',        'similar', 'similarly', 'slightly', 'somethan', 'specifically',        'state', 'states', 'stop', 'strongly', 'substantially', 'successfully',        'sufficiently', 'suggest', 'thered', 'thereof', 'therere', 'thereto',        'theyd', 'theyre', 'thou', 'thoughh', 'thousand', 'throug', 'til',        'tip', 'ts', 'ups', 'usefully', 'usefulness', 've', 'vol', 'vols',        'wed', 'whats', 'wheres', 'whim', 'whod', 'whos', 'widely', 'words',        'world', 'youd', 'youre']def sort(myDict,reverse = False): #Sorting algorithm    return dict(sorted(myDict.items(), key = lambda x:x[1], reverse = reverse))def Word_Order_Frequency_One_Book(Book,Word_Order,File_Output): #One Book Ordering    try:        infile = open(Book, 'r', encoding = 'utf-8-sig') #Opening the file        lines = infile.readlines() #Assigning each line to a list        infile.close() #Closing the file        punctutation = "“’—‘.,:;-\<>'@!'^+%”&/\\()=?_>£#$*½§{[]}\חו|\n"        counts = dict() #Creating dictionary        for line in lines:            new_line = str()            for char in line:                if char not in punctutation: #Removing punctutation marks                    new_line += char.lower() #Replacing uppercase letters with lowercase letters                else:                    continue            words = new_line.split(' ') #Splitting words to a new list by spaces                        if Word_Order == 2: #This will work if the user wants to sort binary words.                myList = [] #Creating temporary list                for i in range(1,len(words)):                    if words[i] not in stop_words and words[i-1] not in stop_words:                        myList.append(words[i-1] + " " + words[i]) #Adding words to the temporary list in pairs                       words.clear() #Cleaning old list                words = myList.copy() #Transferring the contents of the temporary list to the old list.            for word in words: #Counting method                if word in counts: #If the word exists in the dictionary, its value is increased by one                    counts[word] += 1                 else: #If the word is not in the dictionary, setting its value to 1                    counts[word] = 1                            for stopWord in stop_words: #Removing all stop words            if stopWord in counts:                del counts[stopWord]                if ' ' in counts:            del counts[' ']        if '' in counts:             del counts['']                        newFile = open(File_Output,'w',encoding='utf-8') #Opening the output file and printing the result        newFile.write("|        WORD        |        WORD        |\n")        newFile.write("|       ORDER        |       ORDER        |\n")        newFile.write("|     FREQUENCY      |      SEQUENCE      |\n")        newFile.write("-------------------------------------------\n")        counts = sort(counts,True) #Using sort method        for key,value in counts.items():            newFile.write("        " + str(value) + (13-len(str(value)))*' ' + '|   ' + key + '\n')                newFile.close() #Closing the output file    except FileNotFoundError:        print("No such a file: " + Book)        def Word_Order_Frequency_Two_Books(Book_1, Book_2, Word_Order, File_Output): #Two Book Ordering    try:        infile1 = open(Book_1, 'r', encoding = 'utf-8-sig') #Opening the file        lines1 = infile1.readlines() #Assigning each line to a list        infile1.close() #Closing the file        punctutation = "“’—‘.,:;-\<>'@!'^+%”&/\\()=?_>£#$*½§{[]}\חו|\n"        counts1 = dict() #Creating dictionary        for line in lines1:            new_line = str()            for char in line:                if char not in punctutation: #Removing punctutation marks                    new_line += char.lower() #Replacing uppercase letters with lowercase letters                else:                    continue            words = new_line.split(' ') #Splitting words to a new list by spaces                        if Word_Order == 2: #This will work if the user wants to sort binary words.                myList = [] #Creating temporary list                for i in range(1,len(words)):                    if words[i] not in stop_words and words[i-1] not in stop_words:                        myList.append(words[i-1] + " " + words[i])                    i += 1                words.clear() #Cleaning old list                words = myList.copy() #Transferring the contents of the temporary list to the old list.                                for word in words: #Counting method                if word in counts1: #If the word exists in the dictionary, its value is increased by one                    counts1[word] += 1                else: #If the word is not in the dictionary, setting its value to 1                    counts1[word] = 1                            for stopWord in stop_words: #Removing all stop words            if stopWord in counts1:                del counts1[stopWord]                    if ' ' in counts1:            del counts1[' ']        if '' in counts1:            del counts1['']                        infile2 = open(Book_2, 'r', encoding = 'utf-8-sig') #Opening the file        lines2 = infile2.readlines() #Assigning each line to a list        infile2.close() #Closing the file        counts2 = dict() #Creating dictionary        for line in lines2:            new_line = str()            for char in line:                if char not in punctutation: #Removing punctutation marks                    new_line += char.lower() #Replacing uppercase letters with lowercase letters                else:                    continue            words = new_line.split(' ') #Splitting words to a new list by spaces                        if Word_Order == 2: #This will work if the user wants to sort binary words.                myList = [] #Creating temporary list                for i in range(1,len(words)):                    if words[i] not in stop_words and words[i-1] not in stop_words:                        myList.append(words[i-1] + " " + words[i])                    i += 1                words.clear() #Cleaning old list                words = myList.copy() #Transferring the contents of the temporary list to the old list.                                for word in words: #Counting method                if word in counts2: #If the word exists in the dictionary, its value is increased by one                    counts2[word] += 1                else: #If the word is not in the dictionary, setting its value to 1                    counts2[word] = 1                            for stopWord in stop_words: #Removing all stop words            if stopWord in counts2:                del counts2[stopWord]                    if ' ' in counts2:            del counts2[' ']        if '' in counts2:            del counts2['']                                counts = dict()        counts = dict(counts1, **counts2) #Combining dictionaries        for key,value in counts.items():            if key not in counts1:                counts1[key] = 0            if key not in counts2:                counts2[key] = 0            if key in counts1 and key in counts2:                counts[key] = counts1[key] + counts2[key]        counts = sort(counts,True) #Using sort method        if ' ' in counts:            del counts[' ']        if '' in counts:            del counts['']                newFile = open(File_Output,'w',encoding='utf-8') #Opening the output file and printing the result        newFile.write("|       TOTAL        |       BOOK 1       |       BOOK 2       |        WORD        |\n")        newFile.write("|       ORDER        |       ORDER        |       ORDER        |       ORDER        |\n")        newFile.write("|     FREQUENCY      |     FREQUENCY      |     FREQUENCY      |      SEQUENCE      |\n")        newFile.write("-------------------------------------------------------------------------------------\n")                    for key,value in counts.items():            newFile.write("        " + str(counts1[key] + counts2[key]) + (13-len(str(counts1[key] + counts2[key])))*' '                           + '|' + "        " + str(counts1[key]) + (12-len(str(counts1[key])))*' '                           + '|' + "        " + str(counts2[key]) + (12-len(str(counts2[key])))*' '                           + '|' + "        " + key + (13-len(str(key)))*' ' +'\n')                            newFile.close()#Closing the output file    except FileNotFoundError:        print("No book found with the filename you entered. Please try again.")